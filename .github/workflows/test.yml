name: Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: "1.58.1"
  SOLANA_VERSION: "1.8.14"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.2.0
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy
      - name: Install dependencies
        run: sudo apt-get install -y libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang make
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1
      - run: cargo test
   
  test-bpf:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.2.0

      # Install Rust
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy

      # Install Solana
      - name: Cache Solana binaries
        id: solana-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/solana
            ~/.local/share/solana/install
          key: ${{ runner.os }}-${{ env.SOLANA_VERSION }}
      - name: Install Solana
        if: steps.solana-cache.outputs.cache-hit != 'true'
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
      - name: Setup Solana Path
        run: |
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          solana --version
      - name: Install dependencies
        run: sudo apt-get install -y libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang make
      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ runner.os }}-${{ env.SOLANA_VERSION }}

      - name: Run bpf tests
        run: cargo test-bpf -- --show-output --nocapture --test-threads=1 2>&1

  check-license-compatibility:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.2.0
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check license
